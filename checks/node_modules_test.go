package checks

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/veracode/scan_health/v2/report"
)

// Test Cases
func TestForNodeModules(t *testing.T) {

	// Test Case 1: No duplicates
	t.Run("No Node Modules", func(t *testing.T) {
		t.Parallel()
		testReport := report.Report{
			Modules: []report.Module{
				{Name: "module1",
					IsThirdParty: false,
					IsIgnored:    false,
					Instances: []report.ModuleInstance{{
						IsSelected:     true,
						HasFatalErrors: false,
					}},
				},
				{Name: "module2",
					IsThirdParty: false,
					IsIgnored:    false,
					Instances: []report.ModuleInstance{{
						IsSelected:     true,
						HasFatalErrors: false,
					}},
				},
			},
			Issues: []report.Issue{},
		}

		fatalErrors(&testReport)
		assert.Empty(t, testReport.Issues)
	})

	t.Run("Two Node Modules Provided", func(t *testing.T) {
		t.Parallel()
		testReport := report.Report{
			Modules: []report.Module{
				{Name: "module1.exe",
					IsThirdParty: false,
					IsIgnored:    false,
					Instances: []report.ModuleInstance{{
						IsSelected:     true,
						HasFatalErrors: true,
						Status:         "Primary Files Compiled without Debug Symbols",
					}},
				},
				{Name: "test/_nodemodule_/module2.dll",
					IsThirdParty: false,
					IsIgnored:    false,
					Instances: []report.ModuleInstance{{
						IsSelected:     true,
						HasFatalErrors: true,
						Status:         "Primary Files Compiled without Debug Symbols",
					}},
				},
				{Name: "test/_nodemodule_/module3",
					IsThirdParty: false,
					IsIgnored:    false,
					Instances: []report.ModuleInstance{{
						IsSelected:     true,
						HasFatalErrors: false,
					}},
				},
			},
			Issues: []report.Issue{},
		}

		nodeModules(&testReport)
		if !assert.Equal(t, 1, len(testReport.Issues)) {
			t.FailNow()
		}

		if !assert.True(t, strings.Contains(testReport.Issues[0].Description, "2 \"node_modules\"")) {
			t.FailNow()
		}

		assert.Equal(t, report.IssueSeverityMedium, testReport.Issues[0].Severity)

		assert.Equal(t, 2, len(testReport.Recommendations))
	})
}
